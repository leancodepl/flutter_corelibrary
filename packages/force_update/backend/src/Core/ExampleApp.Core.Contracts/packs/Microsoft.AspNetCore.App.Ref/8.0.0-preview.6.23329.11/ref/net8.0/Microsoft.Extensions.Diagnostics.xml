<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.MetricsServiceExtensions">
            <summary>
            Extension methods for setting up metrics services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds metrics services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:System.Diagnostics.DiagnosticsHelper.CompareTags(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Compares two tag collections for equality.
            </summary>
            <param name="sortedTags">The first collection of tags. it has to be a sorted List</param>
            <param name="tags2">The second collection of tags. This one doesn't have to be sorted nor be specific collection type</param>
            <returns>True if the two collections are equal, false otherwise</returns>
            <remarks>
            This method is used to compare two collections of tags for equality. The first collection is expected to be a sorted array
            of tags. The second collection can be any collection of tags.
            we avoid the allocation of a new array by using the second collection as is and not converting it to an array. the reason
            is we call this every time we try to create a meter or instrument and we don't want to allocate a new array every time.
            </remarks>
        </member>
        <member name="P:System.SR.InvalidScope">
            <summary>The meter factory does not allow a custom scope value when creating a meter.</summary>
        </member>
    </members>
</doc>
