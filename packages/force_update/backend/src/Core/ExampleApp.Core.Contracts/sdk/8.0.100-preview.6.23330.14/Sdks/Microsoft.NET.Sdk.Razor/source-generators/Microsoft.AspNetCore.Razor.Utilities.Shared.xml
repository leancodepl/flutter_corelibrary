<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Razor.Utilities.Shared</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            This dummy class is required to compile records when targeting .NET Standard
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.</summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks>The empty string may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.</summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks>The empty string may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks>The empty string may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute.#ctor">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute"/>.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> extension methods
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.NullToEmpty``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Returns an empty array if the input array is null (default)
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutable``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
             Returns the current contents as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> and sets
             the collection to a zero length array.
            </summary>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity"/> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count"/>, the internal array will be extracted
             as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the
             contents will be copied into a new array. The collection will then be set to a
             zero-length array.
            </remarks>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into out variables. Provides support
            for assignment like
            <code>
            var (k,v) = kvp;
            </code>
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable(System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable``1(System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ListExtensions.SetCapacityIfLarger``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
             Set the <paramref name="list"/>'s capacity if it is less than <paramref name="newCapacity"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ListExtensions.ToArrayOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
             Copies the elements of the <see cref="T:System.Collections.Generic.List`1"/> to a new array, or returns an
             empty array if the <see cref="T:System.Collections.Generic.List`1"/> is null.
            </summary>
            <remarks>
             On .NET Framework, <see cref="M:System.Collections.Generic.List`1.ToArray"/> will create a new empty array for any
             empty <see cref="T:System.Collections.Generic.List`1"/>. This method avoids that extra allocation.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ArrayBuilderPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.DictionaryPool`2">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.Dictionary`2"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.HashSetPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares items using default equality.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ListPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.List`1"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled array builder is returned
             to the pool.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.DrainToImmutable">
            <summary>
             Returns the current contents as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> and sets
             the collection to a zero length array.
            </summary>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity"/> equals <see cref="P:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Count"/>, the
             internal array will be extracted as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying
             the contents. Otherwise, the contents will be copied into a new array. The collection
             will then be set to a zero-length array.
            </remarks>
            <returns>An immutable array.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledHashSet`1">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Generic.HashSet`1"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled set is returned
             to the pool.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledList`1">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Generic.List`1"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled list is returned
             to the pool.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ReferenceEqualityHashSetPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares items using reference equality.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StackPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.Stack`1"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StopwatchPool">
            <summary>
            A pool of <see cref="T:System.Diagnostics.Stopwatch"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringBuilderPool">
            <summary>
            A pool of <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringDictionaryPool`1">
            <summary>
            Pooled <see cref="T:System.Collections.Generic.Dictionary`2"/> instances when the key is of type <see cref="T:System.String"/>.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringHashSetPool">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares strings.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Non_negative_number_required">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.This_program_location_is_throught_to_be_unreachable_File_0_Line_1">
            <summary>This program location is thought to be unreachable. File='{0}', Line={1}</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatThis_program_location_is_throught_to_be_unreachable_File_0_Line_1(System.Object,System.Object)">
            <summary>This program location is thought to be unreachable. File='{0}', Line={1}</summary>
        </member>
    </members>
</doc>
